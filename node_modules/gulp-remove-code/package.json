{
  "name": "gulp-remove-code",
  "version": "1.0.2",
  "description": "Remove sections of code from files based on conditions",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha --reporter spec"
  },
  "files": [
    "index.js"
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/crissdev/gulp-remove-code.git"
  },
  "keywords": [
    "gulpplugin",
    "gulp-plugin",
    "gulp",
    "remove",
    "remove code",
    "code",
    "strip",
    "strip code",
    "stream"
  ],
  "author": {
    "name": "crissdev",
    "email": "criss.trifan@gmail.com",
    "url": "http://crissdev.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/crissdev/gulp-remove-code/issues"
  },
  "homepage": "https://github.com/crissdev/gulp-remove-code",
  "dependencies": {
    "bufferstreams": "1.0.1",
    "event-stream": "^3.3.0",
    "gulp-util": "^3.0.4"
  },
  "devDependencies": {
    "mocha": "^2.2.1",
    "should": "^5.2.0"
  },
  "readme": "#[gulp](https://github.com/gulpjs/gulp)-remove-code\n\n[![npm version](https://badge.fury.io/js/gulp-remove-code.svg)](http://badge.fury.io/js/gulp-remove-code)\n[![Build Status](https://travis-ci.org/crissdev/gulp-remove-code.svg?branch=master)](https://travis-ci.org/crissdev/gulp-remove-code)\n[![Dependency Status](https://david-dm.org/crissdev/gulp-remove-code.svg)](https://david-dm.org/crissdev/gulp-remove-code)\n\n> A [Gulp](https://github.com/gulpjs/gulp) plugin to remove sections of code from files based on conditions\n\n\n## Install\n\n```sh\nnpm install --save-dev gulp-remove-code\n```\n\n## Usage\n\n```js\nvar removeCode = require('gulp-remove-code');\n\ngulp.src('./src/*.js')\n  .pipe(removeCode({ noDevFeatures: true }))\n  .pipe(gulp.dest('./dist/'))\n\ngulp.src('./src/*.js')\n  .pipe(removeCode({ noDevFeatures: true, commentStart: '/*', commentEnd: '*/' }))\n  .pipe(gulp.dest('./dist/'))\n\ngulp.src('./src/*.coffee')\n  .pipe(removeCode({ noDevFeatures: true }))\n  .pipe(gulp.dest('./dist/'))\n```\n\n## Examples\n\n### Remove code from HTML files\n\n```html\n<div>\n  <!--removeIf(production)-->\n  <div class=\"sandbox-banner\">Running in sandbox environment</div>\n  <!--endRemoveIf(production)-->\n\n  <span>Removing code is ready.</span>\n</div>\n```\n\n```js\nvar removeCode = require('gulp-remove-code');\n\ngulp.src('./src/file.html')\n  .pipe(removeCode({ production: true }))\n  .pipe(gulp.dest('./dist'))\n```\n\nThe plugin will remove the code inside the comments, as well as the comments.\n\n\n### Remove code JavaScript files\n\n```js\nvar value = JSON.stringify({key: 'value'});\n\n//removeIf(production)\nvalue = JSON.stringify({key: 'value'}, null, 2);\n//endRemoveIf(production)\n```\n\n```js\nvar removeCode = require('gulp-remove-code');\n\ngulp.src('./src/file.js')\n  .pipe(removeCode({ production: true }))\n  .pipe(gulp.dest('./dist'))\n```\n\nThe plugin will remove the code inside the comments, as well as the comments.\n\n\n## API\n\n### removeCode([options])\n\n### options\n\nType: `Object`\n\nA key value pair map to specify what code should be removed. The truthy values will remove the code.\n\n\n#### options.commentStart\n\nType: `String`\n\nDefault: `Detected from file extension. Use // as fallback.`\n\nConfigure how the start comment is defined.\n\n\n#### options.commentEnd\n\nType: `String`\n\nDefault: `Detected from file extension. Use empty as fallback.`\n\nConfigure how the start comment is defined.\n\n\n## License\n\nMIT Â© [Cristian Trifan](http://crissdev.com)\n",
  "readmeFilename": "README.md",
  "_id": "gulp-remove-code@1.0.2",
  "_from": "gulp-remove-code@^1.0.0"
}
